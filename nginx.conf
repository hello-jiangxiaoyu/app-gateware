
# 网关功能：限流配置，ip黑名单，动态路由配置，接口日志，监控，权限校验配置

user  root;
worker_processes    auto;
worker_cpu_affinity auto;
error_log           logs/error.log info;
pid                 logs/nginx.pid;
pcre_jit            on;  # Enables the use of JIT for regular expressions to speed-up their processing.

events {
    accept_mutex        on;     # Solve the shock group
    multi_accept        on;     # Allow worker processes to receive multiple requests at the same time
    worker_connections  10240;  # 单个worker最大连接数
    use epoll;
}

http {
    include                 mime.types;
    include                 conf/log_format.conf;
    default_type            application/json;
    access_log              logs/access.log upstream_log buffer=16384 flush=3;
    resolver                114.114.114.114 valid=3600s;
    sendfile                    on;
    tcp_nopush                  on;
    tcp_nodelay                 on;
    gzip                        on;
    keepalive_timeout           60;
    send_timeout                10s;
    lua_package_path            "/usr/local/openresty/nginx/conf/luaSrc/?.lua;/usr/local/openresty/lualib/?.lua;/usr/local/openresty/site/lualib/?.lua";
    lua_package_cpath           "/usr/local/openresty/lualib/?.so";
    lua_code_cache              on;  # lua代码缓存
    lua_regex_cache_max_entries 255; # 正则解析最大缓存条数
    lua_ssl_verify_depth        5;   # ssl证书校验
    lua_shared_dict             s_ip_limit  5m;  # ip限流共享内存

    # 加载系统配置，并注入到全局变量
    init_by_lua_block {
        local init = require("conf/init")
        init.InitGlobalConfig()
    }

    # 全局ip限流
    access_by_lua_block {
        local rate = require("rate/ipLimit")
        rate.limit()
    }

    # include conf/upstream_http.conf;
    # include conf/other.conf;


    upstream test_backend {
        server              127.0.0.1;
        balancer_by_lua_block {
            local require = require
            local load    = require("upstream/balance")
            load.LoadBalance()
        }
        keepalive           320;
        keepalive_requests  1000;
        keepalive_timeout   60s;
    }
    server {
        listen                  443 ssl;
        ssl_certificate         /usr/local/openresty/nginx/conf/crt/fake.crt;
        ssl_certificate_key     /usr/local/openresty/nginx/conf/crt/fake.key;
        ssl_protocols           TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_certificate_by_lua_block {
            local handler = require("encrypt/ssl")
            handler:Exec()
        }

        error_page  500 502 503 504  /50x.html;
        location /debug {
            access_log              logs/access.log api_log buffer=16384 flush=3;
            content_by_lua_block {
                local dev = require("dev")
                dev:exec()
            }
        }
        location /upstream {
            proxy_set_header        Host            $host;
            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_connect_timeout   1s;
            proxy_pass              http://test_backend;
        }
        location / {
            root   /usr/local/openresty/nginx/html;
            index  index.html index.htm;
        }
    }
}
