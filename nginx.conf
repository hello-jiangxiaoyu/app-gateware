
# 网关功能：限流配置，ip黑名单，动态路由配置，接口日志，监控，权限校验配置

user  root;
worker_processes        auto;
worker_cpu_affinity     auto;
error_log  logs/error.log info;
pid        logs/nginx.pid;

events {
    accept_mutex on;  # Solve the shock group
    multi_accept on;  # Allow worker processes to receive multiple requests at the same time
    worker_connections  10240;  # 单个worker最大连接数
    use epoll;
}

stream {
    include upstream_tcp.conf;
}

http {
    include  mime.types;
    default_type application/json;
    
    log_format upstream_log '{'
        '"time_iso8601": "$time_iso8601", '
        '"status": $status, '
        '"request_method": "$request_method", '
        '"uri": "$uri", '
        '"remote_addr": "$remote_addr", '
        '"remote_port": $remote_port, '
        '"server_addr": "$server_addr", '
        '"server_port": $server_port, '
        '"http_host": "$http_host", '
        '"http_name": "$http_name", '
        '"args": "$args", '
        '"request_length": $request_length, '
        '"body_bytes_sent": $body_bytes_sent, '
        '"bytes_sent": $bytes_sent, '
        '"request_time": $request_time, '
        '"connection_requests": $connection_requests, '
        '"connection": $connection, ' # connection serial number
        '"upstream": "$upstream_addr", '
        '"upstream_status": $upstream_status, '
        '"upstream_response_time": $upstream_response_time, '
        '"upstream_response_length": $upstream_response_length, '
        '"http_referer": "$http_referer", '
        '"http_user_agent": "$http_user_agent", '
        '"pid": $pid, '
        '"ssl_protocol": "$ssl_protocol", '
        '"scheme": "$scheme", '
        '"server_protocol": "$server_protocol"'
        '}';
    access_log              logs/access.log  upstream_log buffer=16384 flush=3;
    resolver 8.8.8.8 114.114.114.114 valid=3600s;
    sendfile                    on;
    tcp_nopush                  on;
    tcp_nodelay                 on;
    gzip                        on;
    keepalive_timeout           60;
    send_timeout                10s;
    lua_package_path            "/usr/local/openresty/nginx/conf/luaSrc/?.lua;/usr/local/openresty/lualib/?.lua;/usr/local/openresty/site/lualib/?.lua";
    lua_package_cpath           "/usr/local/openresty/lualib/?.so";
    lua_code_cache              off;
    lua_regex_cache_max_entries 255;
    lua_ssl_verify_depth        5;
    lua_shared_dict             s_ip_limit  1m;
    access_by_lua_block {
        local rate = require("rate/ipLimit")
        rate.limit()
    }

    # 301, force https
    server {
        access_log off;
        listen  80;
        location /status {
            allow 127.0.0.1;
            allow 192.168.119.0/24;
            deny  all;
            stub_status;
        }
        location / {
            rewrite ^(.*)$ https://$host$1 permanent;
        }
    }
    include upstream_http.conf;
    server {
        access_log      off;
        listen          localhost:1900;
        server_name     localhost;
        default_type    text/json;
        include         service.conf;
        allow           127.0.0.1;
        deny            all;
        location /dev {
            content_by_lua_block {
                local dev = require("dev")
                dev:exec()
            }
        }

        location /debug/http {
            content_by_lua_block {
                ngx.say("ok")
            }
        }
    }
}
